{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\";\nimport { signup, signin, authenticate, isAuthenticated, signout } from \"../../apis\"; // import {\n//   auth,\n//   googleProvider,\n//   createUserProfileDocument,\n//   getCurrentUser\n// } from '../../firebase/firebase.utils';\n// export function* getSnapshotFromUserAuth(userAuth, additionalData) {\n//   try {\n//     const userRef = yield call(\n//       createUserProfileDocument,\n//       userAuth,\n//       additionalData\n//     );\n//     const userSnapshot = yield userRef.get();\n//     yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(authenticate); //const userSnapshot = yield userRef.get();\n    //yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n\n    yield put(signInSuccess(userRef));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // export function* signInWithGoogle() {\n//   try {\n//     const { user } = yield auth.signInWithPopup(googleProvider);\n//     yield getSnapshotFromUserAuth(user);\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n// export function* signInWithEmail({ payload: { email, password } }) {\n//   try {\n//     const { user } = yield auth.signInWithEmailAndPassword(email, password);\n//     yield getSnapshotFromUserAuth(user);\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield call(signin(email, password)); //yield getSnapshotFromUserAuth(user);\n\n    yield put({\n      type: \"USER_FETCH_SUCCEEDED\",\n      user: user\n    });\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // export function* signInWithEmail({ payload: { email, password } }) {\n//   try {\n//     console.log(\"i m fired\");\n//     const { user } = yield signin(email, password);\n//     console.log(user);\n//     yield call(authenticate(user));\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n// export function* isUserAuthenticated() {\n//   try {\n//     const userAuth = yield getCurrentUser();\n//     if (!userAuth) return;\n//     yield getSnapshotFromUserAuth(userAuth);\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield isAuthenticated();\n    if (!userAuth) return; //yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // export function* signOut() {\n//   try {\n//     yield auth.signOut();\n//     yield put(signOutSuccess());\n//   } catch (error) {\n//     yield put(signOutFailure(error));\n//   }\n// }\n\nexport function* signOut() {\n  try {\n    yield signout();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} // export function* signUp({ payload: { email, password, displayName } }) {\n//   try {\n//     const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n//     yield put(signUpSuccess({ user, additionalData: { displayName } }));\n//   } catch (error) {\n//     yield put(signUpFailure(error));\n//   }\n// }\n\nexport function* signUp({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield signup({\n      displayName,\n      email,\n      password\n    });\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n} // export function* signInAfterSignUp({ payload: { user, additionalData } }) {\n//   yield getSnapshotFromUserAuth(user, additionalData);\n// }\n// export function* onGoogleSignInStart() {\n//   yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n// }\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n} // export function* onSignUpSuccess() {\n//   yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n// }\n\nexport function* userSagas() {\n  yield all([//call(onGoogleSignInStart),\n  call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart) //call(onSignUpSuccess),\n  ]);\n}","map":{"version":3,"sources":["C:/Users/Deepak/react_course/covid/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","signup","signin","authenticate","isAuthenticated","signout","getSnapshotFromUserAuth","userAuth","additionalData","userRef","error","signInWithEmail","payload","email","password","user","type","isUserAuthenticated","signOut","signUp","displayName","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACEC,aADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,aALF,EAMEC,aANF,QAOO,gBAPP;AASA,SACEC,MADF,EAEEC,MAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,OALF,QAMO,YANP,C,CAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AACjE,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMhB,IAAI,CAACU,YAAD,CAA1B,CADE,CAEF;AACA;;AACA,UAAMZ,GAAG,CAACI,aAAa,CAACc,OAAD,CAAd,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACK,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMtB,IAAI,CAACS,MAAM,CAACW,KAAD,EAAQC,QAAR,CAAP,CAA3B,CADE,CAEF;;AACA,UAAMvB,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAE,sBAAR;AAAgCD,MAAAA,IAAI,EAAEA;AAAtC,KAAD,CAAT;AACD,GAJD,CAIE,OAAOL,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACK,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,UAAUO,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMV,QAAQ,GAAG,MAAMH,eAAe,EAAtC;AACA,QAAI,CAACG,QAAL,EAAe,OAFb,CAGF;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACK,aAAa,CAACc,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,UAAUQ,OAAV,GAAoB;AACzB,MAAI;AACF,UAAMb,OAAO,EAAb;AACA,UAAMd,GAAG,CAACM,cAAc,EAAf,CAAT;AACD,GAHD,CAGE,OAAOa,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACO,cAAc,CAACY,KAAD,CAAf,CAAT;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,UAAUS,MAAV,CAAiB;AAAEP,EAAAA,OAAO,EAAE;AAAEQ,IAAAA,WAAF;AAAeP,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB;AAAX,CAAjB,EAAgE;AACrE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,MAAM,CAAC;AAAEmB,MAAAA,WAAF;AAAeP,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB,KAAD,CAA7B;AACA,UAAMvB,GAAG,CAACQ,aAAa,CAAC;AAAEgB,MAAAA,IAAF;AAAQP,MAAAA,cAAc,EAAE;AAAEY,QAAAA;AAAF;AAAxB,KAAD,CAAd,CAAT;AACD,GAHD,CAGE,OAAOV,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACS,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,UAAUW,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCX,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUY,kBAAV,GAA+B;AACpC,QAAMjC,UAAU,CAACI,eAAe,CAAC8B,kBAAjB,EAAqCP,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUQ,cAAV,GAA2B;AAChC,QAAMnC,UAAU,CAACI,eAAe,CAACgC,cAAjB,EAAiCR,OAAjC,CAAhB;AACD;AAED,OAAO,UAAUS,aAAV,GAA0B;AAC/B,QAAMrC,UAAU,CAACI,eAAe,CAACkC,aAAjB,EAAgCT,MAAhC,CAAhB;AACD,C,CAED;AACA;AACA;;AAEA,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMrC,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAAC4B,kBAAD,CAFI,EAGR5B,IAAI,CAAC8B,kBAAD,CAHI,EAIR9B,IAAI,CAACgC,cAAD,CAJI,EAKRhC,IAAI,CAACkC,aAAD,CALI,CAMR;AANQ,GAAD,CAAT;AAQD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\nimport {\r\n  signInSuccess,\r\n  signInFailure,\r\n  signOutSuccess,\r\n  signOutFailure,\r\n  signUpSuccess,\r\n  signUpFailure,\r\n} from \"./user.actions\";\r\n\r\nimport {\r\n  signup,\r\n  signin,\r\n  authenticate,\r\n  isAuthenticated,\r\n  signout,\r\n} from \"../../apis\";\r\n\r\n// import {\r\n//   auth,\r\n//   googleProvider,\r\n//   createUserProfileDocument,\r\n//   getCurrentUser\r\n// } from '../../firebase/firebase.utils';\r\n\r\n// export function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n//   try {\r\n//     const userRef = yield call(\r\n//       createUserProfileDocument,\r\n//       userAuth,\r\n//       additionalData\r\n//     );\r\n//     const userSnapshot = yield userRef.get();\r\n//     yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n  try {\r\n    const userRef = yield call(authenticate);\r\n    //const userSnapshot = yield userRef.get();\r\n    //yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    yield put(signInSuccess(userRef));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// export function* signInWithGoogle() {\r\n//   try {\r\n//     const { user } = yield auth.signInWithPopup(googleProvider);\r\n//     yield getSnapshotFromUserAuth(user);\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\n// export function* signInWithEmail({ payload: { email, password } }) {\r\n//   try {\r\n//     const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n//     yield getSnapshotFromUserAuth(user);\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield call(signin(email, password));\r\n    //yield getSnapshotFromUserAuth(user);\r\n    yield put({ type: \"USER_FETCH_SUCCEEDED\", user: user });\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// export function* signInWithEmail({ payload: { email, password } }) {\r\n//   try {\r\n//     console.log(\"i m fired\");\r\n//     const { user } = yield signin(email, password);\r\n//     console.log(user);\r\n//     yield call(authenticate(user));\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\n// export function* isUserAuthenticated() {\r\n//   try {\r\n//     const userAuth = yield getCurrentUser();\r\n//     if (!userAuth) return;\r\n//     yield getSnapshotFromUserAuth(userAuth);\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield isAuthenticated();\r\n    if (!userAuth) return;\r\n    //yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// export function* signOut() {\r\n//   try {\r\n//     yield auth.signOut();\r\n//     yield put(signOutSuccess());\r\n//   } catch (error) {\r\n//     yield put(signOutFailure(error));\r\n//   }\r\n// }\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield signout();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\n// export function* signUp({ payload: { email, password, displayName } }) {\r\n//   try {\r\n//     const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n//     yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n//   } catch (error) {\r\n//     yield put(signUpFailure(error));\r\n//   }\r\n// }\r\n\r\nexport function* signUp({ payload: { displayName, email, password } }) {\r\n  try {\r\n    const { user } = yield signup({ displayName, email, password });\r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  } catch (error) {\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\n// export function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n//   yield getSnapshotFromUserAuth(user, additionalData);\r\n// }\r\n\r\n// export function* onGoogleSignInStart() {\r\n//   yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n// }\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\n// export function* onSignUpSuccess() {\r\n//   yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n// }\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    //call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n    call(onSignUpStart),\r\n    //call(onSignUpSuccess),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}