{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\";\nimport { signup, signin, authenticate, isAuthenticated, signout } from \"../../apis\"; // import {\n//   auth,\n//   googleProvider,\n//   createUserProfileDocument,\n//   getCurrentUser\n// } from '../../firebase/firebase.utils';\n// export function* getSnapshotFromUserAuth(userAuth, additionalData) {\n//   try {\n//     const userRef = yield call(\n//       createUserProfileDocument,\n//       userAuth,\n//       additionalData\n//     );\n//     const userSnapshot = yield userRef.get();\n//     yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n// export function* signInWithGoogle() {\n//   try {\n//     const { user } = yield auth.signInWithPopup(googleProvider);\n//     yield getSnapshotFromUserAuth(user);\n//   } catch (error) {\n//     yield put(signInFailure(error));\n//   }\n// }\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/Deepak/react_course/covid/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","signup","signin","authenticate","isAuthenticated","signout","signInWithEmail","payload","email","password","user","auth","signInWithEmailAndPassword","getSnapshotFromUserAuth","error","isUserAuthenticated","userAuth","getCurrentUser","signOut","signUp","displayName","createUserWithEmailAndPassword","additionalData","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\n\r\nimport UserActionTypes from \"./user.types\";\r\n\r\nimport {\r\n  signInSuccess,\r\n  signInFailure,\r\n  signOutSuccess,\r\n  signOutFailure,\r\n  signUpSuccess,\r\n  signUpFailure,\r\n} from \"./user.actions\";\r\n\r\nimport {\r\n  signup,\r\n  signin,\r\n  authenticate,\r\n  isAuthenticated,\r\n  signout,\r\n} from \"../../apis\";\r\n\r\n// import {\r\n//   auth,\r\n//   googleProvider,\r\n//   createUserProfileDocument,\r\n//   getCurrentUser\r\n// } from '../../firebase/firebase.utils';\r\n\r\n// export function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n//   try {\r\n//     const userRef = yield call(\r\n//       createUserProfileDocument,\r\n//       userAuth,\r\n//       additionalData\r\n//     );\r\n//     const userSnapshot = yield userRef.get();\r\n//     yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\n// export function* signInWithGoogle() {\r\n//   try {\r\n//     const { user } = yield auth.signInWithPopup(googleProvider);\r\n//     yield getSnapshotFromUserAuth(user);\r\n//   } catch (error) {\r\n//     yield put(signInFailure(error));\r\n//   }\r\n// }\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signUp({ payload: { email, password, displayName } }) {\r\n  try {\r\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  } catch (error) {\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n  yield getSnapshotFromUserAuth(user, additionalData);\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n    call(onSignUpStart),\r\n    call(onSignUpSuccess),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}