{"ast":null,"code":"import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport warning from 'warning';\nimport Themed from '../UIAction/themed.js';\nimport Plain from '../UIAction/plain.js';\n\nvar getCommonLinkProps = function getCommonLinkProps(props) {\n  warning( // If `onClick` prop exists then `to` must also exist.\n  !props.onClick || props.to && props.onClick, 'The `onClick` prop in the Thumbprint `Link` and `ThemedLink` components should only be used when the `to` prop is also provided. Consider using the `Button` component instead.');\n  return {\n    to: props.to,\n    onClick: props.onClick,\n    shouldOpenInNewTab: props.shouldOpenInNewTab,\n    isDisabled: props.isDisabled,\n    children: props.children,\n    accessibilityLabel: props.accessibilityLabel,\n    dataTest: props.dataTest\n  };\n};\n/**\n * Anchor link that renders as text.\n */\n\n\nvar Link = React.forwardRef(function (_ref, ref) {\n  var to = _ref.to,\n      onClick = _ref.onClick,\n      _ref$shouldOpenInNewT = _ref.shouldOpenInNewTab,\n      shouldOpenInNewTab = _ref$shouldOpenInNewT === void 0 ? false : _ref$shouldOpenInNewT,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n      children = _ref.children,\n      accessibilityLabel = _ref.accessibilityLabel,\n      dataTest = _ref.dataTest,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'primary' : _ref$theme,\n      iconLeft = _ref.iconLeft,\n      iconRight = _ref.iconRight;\n  return React.createElement(Plain, _extends({}, getCommonLinkProps({\n    to: to,\n    onClick: onClick,\n    shouldOpenInNewTab: shouldOpenInNewTab,\n    isDisabled: isDisabled,\n    children: children,\n    accessibilityLabel: accessibilityLabel,\n    dataTest: dataTest\n  }), {\n    theme: theme,\n    iconLeft: iconLeft,\n    iconRight: iconRight,\n    ref: ref\n  }));\n});\n/**\n * Anchor link that visually looks like a button.\n */\n\nvar ThemedLink = React.forwardRef(function (_ref2, ref) {\n  var to = _ref2.to,\n      onClick = _ref2.onClick,\n      _ref2$shouldOpenInNew = _ref2.shouldOpenInNewTab,\n      shouldOpenInNewTab = _ref2$shouldOpenInNew === void 0 ? false : _ref2$shouldOpenInNew,\n      _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      children = _ref2.children,\n      accessibilityLabel = _ref2.accessibilityLabel,\n      dataTest = _ref2.dataTest,\n      icon = _ref2.icon,\n      iconRight = _ref2.iconRight,\n      _ref2$theme = _ref2.theme,\n      theme = _ref2$theme === void 0 ? 'primary' : _ref2$theme,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 'large' : _ref2$size,\n      _ref2$width = _ref2.width,\n      width = _ref2$width === void 0 ? 'auto' : _ref2$width;\n  return React.createElement(Themed, _extends({}, getCommonLinkProps({\n    to: to,\n    onClick: onClick,\n    shouldOpenInNewTab: shouldOpenInNewTab,\n    isDisabled: isDisabled,\n    children: children,\n    accessibilityLabel: accessibilityLabel,\n    dataTest: dataTest\n  }), {\n    icon: icon,\n    iconRight: iconRight,\n    theme: theme,\n    size: size,\n    width: width,\n    ref: ref\n  }));\n});\nexport default Link;\nexport { ThemedLink };","map":{"version":3,"sources":["../../../../components/Link/index.tsx"],"names":["getCommonLinkProps","warning","props","to","onClick","shouldOpenInNewTab","isDisabled","children","accessibilityLabel","dataTest","Link","theme","iconLeft","iconRight","ref","ThemedLink","icon","size","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport { Themed, Plain } from '../UIAction/index';\n\ninterface CommonProps {\n    to?: string;\n    shouldOpenInNewTab?: boolean;\n    children?: React.ReactNode;\n    isDisabled?: boolean;\n    onClick?: () => void;\n    dataTest?: string;\n    accessibilityLabel?: string;\n}\n\nconst getCommonLinkProps = (props: CommonProps): CommonProps => {\n    warning(\n        // If `onClick` prop exists then `to` must also exist.\n        !props.onClick || (props.to && props.onClick),\n        'The `onClick` prop in the Thumbprint `Link` and `ThemedLink` components should only be used when the `to` prop is also provided. Consider using the `Button` component instead.',\n    );\n\n    return {\n        to: props.to,\n        onClick: props.onClick,\n        shouldOpenInNewTab: props.shouldOpenInNewTab,\n        isDisabled: props.isDisabled,\n        children: props.children,\n        accessibilityLabel: props.accessibilityLabel,\n        dataTest: props.dataTest,\n    };\n};\n\n/**\n * Anchor link that renders as text.\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkPropTypes>(\n    (\n        {\n            to,\n            onClick,\n            shouldOpenInNewTab = false,\n            isDisabled = false,\n            children,\n            accessibilityLabel,\n            dataTest,\n            theme = 'primary',\n            iconLeft,\n            iconRight,\n        }: LinkPropTypes,\n        ref,\n    ) => (\n        <Plain\n            {...getCommonLinkProps({\n                to,\n                onClick,\n                shouldOpenInNewTab,\n                isDisabled,\n                children,\n                accessibilityLabel,\n                dataTest,\n            })}\n            theme={theme}\n            iconLeft={iconLeft}\n            iconRight={iconRight}\n            ref={ref}\n        />\n    ),\n);\n\ninterface LinkPropTypes {\n    /**\n     * Contents displayed within the anchor.\n     */\n    children?: React.ReactNode;\n    /**\n     * Description of the link’s content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Functionally disables the anchor. We discourage the use of this prop since it is difficult\n     * to visually indicate that a link is disabled. Consider not rendering the link if it is not\n     * interactive.\n     */\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Function to fire when clicking on the anchor. This should be used alongside the `to` prop.\n     */\n    onClick?: () => void;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text within `Link`.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text within `Link`.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * Sets the anchor’s text color.\n     *\n     * `inherit` will make the anchor inherit `color` from its parent.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTest?: string;\n}\n\n/**\n * Anchor link that visually looks like a button.\n */\nconst ThemedLink = React.forwardRef<HTMLAnchorElement, ThemedLinkPropTypes>(\n    (\n        {\n            to,\n            onClick,\n            shouldOpenInNewTab = false,\n            isDisabled = false,\n            children,\n            accessibilityLabel,\n            dataTest,\n            icon,\n            iconRight,\n            theme = 'primary',\n            size = 'large',\n            width = 'auto',\n        }: ThemedLinkPropTypes,\n        ref,\n    ) => (\n        <Themed\n            {...getCommonLinkProps({\n                to,\n                onClick,\n                shouldOpenInNewTab,\n                isDisabled,\n                children,\n                accessibilityLabel,\n                dataTest,\n            })}\n            icon={icon}\n            iconRight={iconRight}\n            theme={theme}\n            size={size}\n            width={width}\n            ref={ref}\n        />\n    ),\n);\n\ninterface ThemedLinkPropTypes {\n    /**\n     * Contents displayed within the button.\n     */\n    children?: React.ReactNode;\n    /**\n     * Description of the link’s content. It is required if the link contains an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Visually and functionally disables the button.\n     */\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Function to fire when clicking on the anchor. This should be used alongside the `to` prop.\n     */\n    onClick?: () => void;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left within the\n     * button. It must be one of the `small` icons.\n     */\n    icon?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right within the\n     * button. It must be one of the `small` icons.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Controls the button's background, text, and border theme.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'caution' | 'solid';\n    /**\n     * Changes the button's `line-height`, `padding`, `border-radius`, and `font-size`.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Themed links are as wide as the content that is passed in.  The `full` option will\n     * expand the width to `100%` on all screens. `full-below-small` will expand the width to 100%\n     * on devices smaller than [our `small` breakpoint](/tokens/#section-breakpoint).\n     */\n    width?: 'auto' | 'full' | 'full-below-small';\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTest?: string;\n}\n\nexport default Link;\nexport { ThemedLink };\n"]},"metadata":{},"sourceType":"module"}